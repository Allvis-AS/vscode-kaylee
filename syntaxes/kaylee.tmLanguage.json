{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Kaylee",
	"patterns": [
		{
			"include": "#schemas"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"schemas": {
			"begin": "\\b(schema)\\s+([a-zA-Z][a-zA-Z0-9]*)[\\s\\n]*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "entity.name.namespace"
				},
				"3": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#entities"
				},
				{
					"include": "#queries"
				},
				{
					"include": "#comments"
				}
			]
		},
		"entities": {
			"begin": "\\b(entity)\\s+([a-zA-Z][a-zA-Z0-9]*)[\\s\\n]*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "entity.name.class"
				},
				"3": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#entities"
				},
				{
					"include": "#queries"
				},
				{
					"include": "#fields"
				},
				{
					"include": "#keys"
				},
				{
					"include": "#mutations"
				},
				{
					"include": "#comments"
				}
			]
		},
		"queries": {
			"begin": "\\b(query)\\s+([a-zA-Z][a-zA-Z0-9]*)[\\s\\n]*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "entity.name.class"
				},
				"3": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#queries"
				},
				{
					"include": "#fields"
				},
				{
					"include": "#keys"
				},
				{
					"include": "#comments"
				}
			]
		},
		"fields": {
			"begin": "\\b(fields)\\s*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#fieldDefinitionWithoutProperties"
				},
				{
					"include": "#fieldDefinitionWithProperties"
				},
				{
					"include": "#comments"
				}
			]
		},
		"fieldDefinitionWithoutProperties": {
			"match": "\\b([a-zA-Z][a-zA-Z0-9]*)(\\?)?\\s+(.+)\\s*(;)",
			"captures": {
				"1": {
					"name": "variable.other.member"
				},
				"2": {
					"name": "storage.modifier"
				},
				"3": {
					"patterns": [
						{
							"include": "#fieldType"
						}
					]
				},
				"4": {
					"name": "punctuation.terminator"
				}
			}
		},
		"fieldDefinitionWithProperties": {
			"begin": "\\b([a-zA-Z][a-zA-Z0-9]*)(\\?)?\\s+(.+)\\s*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "variable.other.member"
				},
				"2": {
					"name": "storage.modifier"
				},
				"3": {
					"patterns": [
						{
							"include": "#fieldType"
						}
					]
				},
				"4": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#fieldProperties"
				},
				{
					"include": "#comments"
				}
			]
		},
		"fieldType": {
			"patterns": [
				{
					"name": "storage.type",
					"match": "BIT"
				},
				{
					"name": "storage.type",
					"match": "CHAR"
				},
				{
					"name": "storage.type",
					"match": "GUID"
				},
				{
					"name": "storage.type",
					"match": "DATE"
				},
				{
					"name": "storage.type",
					"match": "ROWVERSION"
				},
				{
					"name": "storage.type",
					"match": "TINYINT"
				},
				{
					"match": "(INT)(\\s+AUTO\\s+INCREMENT)?",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "storage.modifier"
						}
					}
				},
				{
					"match": "(BIGINT)(\\s+AUTO\\s+INCREMENT)?",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "storage.modifier"
						}
					}
				},
				{
					"match": "(DECIMAL)\\s*(\\()\\s*(\\d+)\\s*(,)\\s*(\\d+)\\s*(\\))",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "meta.group"
						},
						"3": {
							"name": "constant.numeric.integer"
						},
						"4": {
							"name": "punctuation.separator"
						},
						"5": {
							"name": "constant.numeric.integer"
						},
						"6": {
							"name": "meta.group"
						}
					}
				},
				{
					"match": "(BINARY)\\s*(\\()\\s*(\\d+)\\s*(\\))",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "meta.group"
						},
						"3": {
							"name": "constant.numeric.integer"
						},
						"4": {
							"name": "meta.group"
						}
					}
				},
				{
					"match": "(VARBINARY)\\s*(\\()\\s*(?:(\\d+)|(MAX))\\s*(\\))",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "meta.group"
						},
						"3": {
							"name": "constant.numeric.integer"
						},
						"4": {
							"name": "constant.language"
						},
						"5": {
							"name": "meta.group"
						}
					}
				},
				{
					"match": "(TEXT)\\s*(\\()\\s*(?:(\\d+)|(MAX))\\s*(\\))",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "meta.group"
						},
						"3": {
							"name": "constant.numeric.integer"
						},
						"4": {
							"name": "constant.language"
						},
						"5": {
							"name": "meta.group"
						}
					}
				}
			]
		},
		"fieldProperties": {
			"patterns": [
				{
					"begin": "\\b(default)\\s*(=)",
					"end": "(;)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other"
						},
						"2": {
							"name": "keyword.operator.assignment"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator"
						}
					},
					"patterns": [
						{
							"include": "#numericConstant"
						},
						{
							"include": "#literal"
						},
						{
							"include": "#supportFunction"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "\\b(computed)\\s*(=)",
					"end": "(;)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other"
						},
						"2": {
							"name": "keyword.operator.assignment"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator"
						}
					},
					"patterns": [
						{
							"include": "#boolean"
						}
					]
				}
			]
		},
		"keys": {
			"begin": "\\b(keys)\\s*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#keysBody"
				},
				{
					"include": "#comments"
				}
			]
		},
		"keysBody": {
			"patterns": [
				{
					"include": "#primaryKey"
				},
				{
					"include": "#uniqueKey"
				},
				{
					"include": "#referenceKey"
				}
			]
		},
		"primaryKey": {
			"patterns": [
				{
					"begin": "\\b(primary)\\s*(=)",
					"end": "(;)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other"
						},
						"2": {
							"name": "keyword.operator.assignment"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator"
						}
					},
					"patterns": [
						{
							"include": "#commaSeparatedFields"
						}
					]
				}
			]
		},
		"uniqueKey": {
			"begin": "\\b(unique)\\b",
			"end": "(;)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator"
				}
			},
			"patterns": [
				{
					"include": "#commaSeparatedFields"
				}
			]
		},
		"referenceKey": {
			"begin": "\\b(reference)\\b",
			"end": "(;)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator"
				}
			},
			"patterns": [
				{
					"name": "punctuation.accessor",
					"match": "(=>)\\s*([a-zA-Z][a-zA-Z0-9]*)(::)([a-zA-Z][a-zA-Z0-9]*(?:\\.[a-zA-Z][a-zA-Z0-9]*)*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor"
						},
						"2": {
							"name": "entity.name.namespace"
						},
						"3": {
							"name": "punctuation.accessor"
						},
						"4": {
							"patterns": [
								{
									"name": "punctuation.accessor",
									"match": "\\."
								},
								{
									"name": "entity.name.class",
									"match": "[a-zA-Z][a-zA-Z0-9]*"
								}
							]
						}
					}
				},
				{
					"include": "#commaSeparatedFields"
				}
			]
		},
		"mutations": {
			"begin": "\\b(mutations)\\s*(\\{)",
			"end": "(\\})",
			"beginCaptures": {
				"1": {
					"name": "keyword.other"
				},
				"2": {
					"name": "meta.block"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.block"
				}
			},
			"patterns": [
				{
					"include": "#mutationsBody"
				},
				{
					"include": "#comments"
				}
			]
		},
		"mutationsBody": {
			"patterns": [
				{
					"begin": "\\b([a-zA-Z][a-zA-Z0-9]*)\\s*(\\()",
					"end": "(\\))\\s*(;)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function"
						},
						"2": {
							"name": "meta.group"
						}
					},
					"endCaptures": {
						"1": {
							"name": "meta.group"
						},
						"2": {
							"name": "punctuation.terminator"
						}
					},
					"patterns": [
						{
							"include": "#commaSeparatedFields"
						}
					]
				}
			]
		},
		"commaSeparatedFields": {
			"patterns": [
				{
					"name": "variable.other.member",
					"match": "[a-zA-Z][a-zA-Z0-9]*"
				},
				{
					"name": "punctuation.separator",
					"match": ","
				}
			]
		},
		"boolean": {
			"name": "constant.language",
			"match": "\\b(?:true|false)\\b"
		},
		"numericConstant": {
			"patterns": [
				{
					"name": "constant.numeric.hexadecimal",
					"match": "0[xX][0-9a-fA-F]+"
				},
				{
					"name": "constant.numeric",
					"match": "-?\\d+(?:\\.\\d+)?"
				}
			]
		},
		"literal": {
			"name": "string.quoted.single",
			"begin": "'",
			"end": "'",
			"applyEndPatternLast": 1,
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "''"
				}
			]
		},
		"supportFunction": {
			"name": "support.function",
			"match": "(?:NEWID|SYSDATETIMEOFFSET)\\(\\)"
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "//.*"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		}
	},
	"scopeName": "source.kaylee"
}